This app is an autocomplete example using redis.

Part I: redis and new rails app

$ brew install redis
$ rails new soulmate_example
$ cd soulmate_example

update Gemfile:
gem 'soulmate'
gem 'faker'
gem 'json', '1.4.6' # kinda blows you have to use this old version
gem 'SystemTimer'   # prevents redis from hanging

$ bundle update

Part II: create model and test data using Faker
$ rails g model person name:string

In db/seeds.rb
1000.times do
  Person.create :name => "#{Faker::Name.first_name} #{Faker::Name.last_name}"
end

$ rake db:migrate
$ rake db:seed

Part III: callback for loading the data into Redis

class Person < ActiveRecord::Base
  after_save :load_into_soulmate

  def load_into_soulmate
    loader = Soulmate::Loader.new("person")
    loader.add("term" => name, "id" => id)
  end
end

# in another terminal:
$ redis-server

$ rake db:reset

$ redis-cli
redis 127.0.0.1:6379> hget soulmate-data:person 1
"{\"term\":\"Porter Harber\",\"id\":1}"
redis 127.0.0.1:6379> hget soulmate-data:person 2
"{\"term\":\"Alec Ritchie\",\"id\":2}"
redis 127.0.0.1:6379> hget soulmate-data:person 3
"{\"term\":\"Clair Oberbrunner\",\"id\":3}"

Part IV: jquery

Go to: http://jqueryui.com/download
De-select everything and then Select: Core, Widget, Mouse, Position, Autocomplete
For the theme pick whatever you want, e.g. Swanky Purse

$ cd ~/Downloads/jquery-ui-1
$ cp js/* /path/to/app/assets/javascripts/.
$ cp -r css/swanky-purse /path/to/app/assets/stylesheets/.

$ rails g controller people index autocomplete_person_name


# In config/routes.rb
root :to => 'people#index'

rm public/index.html

update view with:
Please enter the name of a person:
<%= text_field_tag 'person_name' %>

<script>
$(function() {
  $("#person_name" ).autocomplete({
    source: "<%= people_autocomplete_person_name_path %>"
  });
})
</script>


Part V: controller and model search
class PeopleController < ApplicationController
  def index
  end

  def autocomplete_person_name
    render :json => Person.search(params['term'])
  end
end

class Person < ActiveRecord::Base

  def self.search(term)
    matches = Soulmate::Matcher.new('person').matches_for_term(term)
    matches.collect {|match| {"id" => match["id"], "label" => match["term"], "value" => match["term"] } }
  end

This guide is based on:
http://patshaughnessy.net/2011/11/23/finding-your-soulmate-autocomplete-with-redis-in-rails-3-1

